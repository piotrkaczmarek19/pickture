<?php

namespace PublicBundle\Repository;

/**
 * ImageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImageRepository extends \Doctrine\ORM\EntityRepository
{

    public function getImagesByTag($tag){
        $images = $this->createQueryBuilder('i')
            ->innerJoin('i.tags', 't')
            ->where('t.name LIKE :tag_name')
            ->setParameter('tag_name', "%".$tag."%")
            ->getQuery()->getResult();
        return $images;
    }
    public function getImagesBySubmitDate($interval){
        $images = $this->createQueryBuilder('i')
            // Makes so that we query for a limited amount (posted today, last month, last year, all)
            ->where('i.created >= :interval')
            ->orderBy('i.created')
            ->setParameter('interval', $interval)
            ->getQuery()
            ->getResult();
        return $images;
    }
    public function getImagesByUser($user_name)
    {
        $images = $this->createQueryBuilder('i')
            ->where('u.username LIKE :user_name')
            ->setParameter('user_name', "%".$user_name."%")
            ->getQuery()
            ->getResult();
        return $images;
    }
    public function getImageUrl($image_id){
        $image =$this->find($image_id);
        return $image->getWebPath();
    }
    public function deleteImage($image_id){
        $image_path = $this->find($image_id)->getAbsolutePath();
        // Deleting from DB
        $this->createQueryBuilder('i')
            ->delete()
            ->where('i.id = :id')
            ->setParameter('id', $image_id)
            ->getQuery()
            ->execute();
        // Deleting from server
        unlink($image_path);
    }
    public function getImagesByPopularity($condition){
        // Give $condition value of null if we want also the images w/ negative score since null<-1 => true
        $images = $this->createQueryBuilder('i')
            ->where('i.score > :condition')
            ->orderBy('i.score', 'DESC')
            ->setParameter('condition', $condition)
            ->getQuery()
            ->getResult();
        return $images;
    }
    public function UpdateScore($action, $id){
        $score = $this
            ->find($id)
            ->getScore();
        $new_score = $score + $action;

        $this->createQueryBuilder('i')
            ->update()
            ->set('i.score', $new_score)
            ->where('i.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->execute();

        return true;
    }
}
