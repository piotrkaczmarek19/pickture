<?php

namespace PublicBundle\Repository;

use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository implements UserLoaderInterface
{
    public function loadUserByUsername($username){
        $user = $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();
        if(null === $user){
            return null;
        }
        return $user;
    }
    public function loadImagesFromUsers($username){
        $images = [];
        $users = $this->createQueryBuilder('u')
            ->where('u.username LIKE :username OR u.email LIKE :email')
            ->setParameter('username', "%".$username."%")
            ->setParameter('email', "%".$username."%")
            ->getQuery()
            ->getResult();
        if(null === $users){
            return null;
        }
        foreach ($users as $user)
        {
            if (sizeof($user) > 0)
            {
                $images = array_merge($images, $user->getImages()->toArray());
            }
        }
        return $images;
    }
    public function editUsername($user_id, $new_username){
        // Check if new username already exists
        if (!$this->findOneBy('username', $new_username))
        {
            $this->createQueryBuilder('u')
                ->update()
                ->set('u.username', $new_username)
                ->where('u.id = :user_id')
                ->setParameter('user_id', $user_id)
                ->getQuery()
                ->execute();
            return 1;
        }
        else
        {
            return 0;
        }
    }
    public function editEmail($user_id, $new_email){
        // Check if new email already exists
        if (!$this->findOneBy('email', $new_email))
        {
            $this->createQueryBuilder('u')
                ->update()
                ->set('u.email', $new_email)
                ->where('u.id = :user_id')
                ->setParameter('user_id', $user_id)
                ->getQuery()
                ->execute();
            return 1;
        }
        else
        {
            return 0;
        }
    }
    public function changePassword($user_id, $new_password){
        $this->createQueryBuilder('u')
            ->update()
            ->set('u.password', $new_password)
            ->where('u.id = :user_id')
            ->setParameter('user_id', $user_id)
            ->getQuery()
            ->execute();
        return 1;
    }
    public function banUser($user_id)
    {
        $user = $this->find($user_id);
        if ($user->isEnabled())
        {
            $param = 0;        
        }
        else
        {
            $param = 1;
        }
        $this->createQueryBuilder('u')
            ->update()
            ->set('u.isActive', $param)
            ->where('u.id = :user_id')
            ->setParameter('user_id', $user_id)
            ->getQuery()
            ->execute();    
    }
    public function deleteUser($user_id){
        $this->createQueryBuilder('u')
            ->delete()
            ->where('u.id = :id')
            ->setParameter('id', $user_id)
            ->getQuery()
            ->execute();
    }
}
